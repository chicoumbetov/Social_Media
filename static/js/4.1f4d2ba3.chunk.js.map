{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.js","components/Dialogs/AddMessageForm/AddMessageForm.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","maxLengthCreator50","maxLengthCreator","reduxForm","form","props","onSubmit","handleSubmit","Field","component","Textarea","validate","required","name","placeholder","Message","className","d","message","DialogItem","path","id","dialog","active","to","Dialogs","dialogsPage","dialogsElements","dialogsData","map","idNameDialog","messageElements","messageData","idNameMessage","dialogs","dialogsItems","messages","values","sendMessage","newMessageBody","compose","connect","dispatch","sendMessageCreator","Component","RedirectComponent","this","React"],"mappings":"iGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,iICG9KC,EAA6B,SAACC,GAAD,MAAY,CACzCC,OAAQD,EAAME,KAAKD,S,kDCAjBE,EAAqBC,YAAiB,IAc7BC,cAAU,CAAEC,KAAM,wBAAlBD,EAZQ,SAACE,GACpB,OACI,uBAAMC,SAAUD,EAAME,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUC,SAAU,CAACC,IAAUX,GACjDY,KAAK,iBAAiBC,YAAY,yBAEtC,8BAAK,kD,kBCRXC,EAAU,SAACV,GACb,OACI,qBAAKW,UAAWC,IAAEC,QAAlB,SAA4Bb,EAAMa,WAIpCC,EAAa,SAACd,GAEhB,IAAIe,EAAO,YAAcf,EAAMgB,GAE/B,OAAQ,qBAAKL,UAAWC,IAAEK,OAAS,IAAML,IAAEM,OAAnC,SACJ,cAAC,IAAD,CAASC,GAAIJ,EAAb,SAAoBf,EAAMQ,UAoCnBY,EAhCC,SAACpB,GAGb,IAAIP,EAAQO,EAAMqB,YAIdC,EAAkB7B,EAAM8B,YAAYC,KAAI,SAAAC,GAAY,OAAK,cAAC,EAAD,CAAYjB,KAAMiB,EAAajB,KAAMQ,GAAIS,EAAaT,QAG/GU,EAAkBjC,EAAMkC,YAAYH,KAAI,SAAAI,GAAa,OAAK,cAAC,EAAD,CAASf,QAASe,EAAcf,QAASG,GAAIY,EAAcZ,QAQzH,OAAKhB,EAAMN,OAEH,sBAAKiB,UAAWC,IAAEiB,QAAlB,UAEJ,qBAAKlB,UAAWC,IAAEkB,aAAlB,SAAiCR,IACjC,sBAAKX,UAAWC,IAAEmB,SAAlB,UACI,oCAAOL,EAAP,OACA,cAAC,EAAD,CAAgBzB,SAZJ,SAAC+B,GACjBhC,EAAMiC,YAAYD,EAAOE,yBAIH,cAAC,IAAD,CAAUf,GAAI,YCN7BgB,sBACXC,aArBkB,SAAC3C,GAEnB,MAAO,CAEH4B,YAAa5B,EAAM4B,gBAIF,SAACgB,GAEtB,MAAO,CAIHJ,YAAa,SAACC,GACVG,EAASC,YAAmBJ,UHpBR,SAACK,GAAe,IACtCC,EADqC,uKAGnC,OAAKC,KAAKzC,MAAMN,OAET,cAAC6C,EAAD,eAAeE,KAAKzC,QAFI,cAAC,IAAD,CAAUmB,GAAG,eAHT,GACXuB,IAAMH,WAWtC,OAFqCH,YAAQ5C,EAAR4C,CAAoCI,KGe9DL,CAGZf","file":"static/js/4.1f4d2ba3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1zcA5\",\"dialogsItems\":\"Dialogs_dialogsItems__LJLbH\",\"active\":\"Dialogs_active__HPhYh\",\"messages\":\"Dialogs_messages__Jua-B\",\"message\":\"Dialogs_message__2mgSv\"};","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from \"react-router-dom\"\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to='/login' />\r\n\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { maxLengthCreator, required } from '../../../utils/validators/validators';\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\n\r\nconst maxLengthCreator50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} validate={[required, maxLengthCreator50]}\r\n                name=\"newMessageBody\" placeholder='Enter your message' />\r\n            </div>\r\n            <div><button >Send</button></div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm({ form: \"dialogAddMessageForm\" })(AddMessageForm)\r\n//const AddMessageFormRedux = ","import React from 'react';\r\nimport { NavLink, Redirect } from 'react-router-dom';\r\nimport AddMessageForm from './AddMessageForm/AddMessageForm';\r\nimport d from './Dialogs.module.css';\r\n//import {sendMessageCreator, updateNewMessageBodyCreator } from '../../redux/dialogs-reducer';\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={d.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nconst DialogItem = (props) => {\r\n\r\n    let path = '/dialogs/' + props.id;\r\n\r\n    return (<div className={d.dialog + ' ' + d.active}>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n    </div>)\r\n}\r\n//oldArray\r\nconst Dialogs = (props) => {\r\n    // we can getState dialogsPage from store which is in props that came from  tag Dialogs in App.js\r\n    //let state = props.store.getState().dialogsPage;\r\n    let state = props.dialogsPage;\r\n\r\n    //from dialogsData old array of object we are mapping newArray dialogsElements\r\n    //newArray will have as much elements as objects quantity\r\n    let dialogsElements = state.dialogsData.map(idNameDialog => (<DialogItem name={idNameDialog.name} id={idNameDialog.id} />))\r\n    //oldArray messageData\r\n    //newArray\r\n    let messageElements = state.messageData.map(idNameMessage => (<Message message={idNameMessage.message} id={idNameMessage.id} />))\r\n    //let newMessageBody = state.newMessageBody;\r\n\r\n    let addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody);\r\n        //props.store.dispatch (sendMessageCreator());  \r\n    }\r\n\r\n    if (!props.isAuth) return <Redirect to={\"/login\"} />\r\n\r\n    return (<div className={d.dialogs}>\r\n\r\n        <div className={d.dialogsItems}>{dialogsElements}</div>\r\n        <div className={d.messages}>\r\n            <div> {messageElements} </div>\r\n            <AddMessageForm onSubmit={addNewMessage} />\r\n        </div>\r\n    </div>)\r\n}\r\n\r\n\r\n\r\nexport default Dialogs;\r\n\r\n//textarea value={newMessageBody} onChange={onNewMessageChange}placeholder='Enter your message' >textarea\r\n/*\r\n*/","//import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\n//import { Redirect } from 'react-router-dom';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\n//import d from './Dialogs.module.css';\r\nimport { sendMessageCreator } from '../../redux/dialogs-reducer';\r\n//import store from '../../redux/redux-store';\r\n//import StoreContext from '../../StoreContext';\r\nimport Dialogs from './Dialogs';\r\n\r\n//oldArray DialogsContainer in DialogsContainerElement was replace by SuperDialogsContainer\r\n\r\nlet mapStateToProps = (state) => {\r\n\r\n    return {\r\n        //a=1       b=2\r\n        dialogsPage: state.dialogsPage,\r\n\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    //mapDispatchToProps = mapping(putting, turning into) of callbacks to props\r\n    return {\r\n        //c=3\r\n        //these 2 callbacks will be stored in props\r\n        //updateNewMessageBody: (body) => {dispatch(updateNewMessageBodyCreator(body));},\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody));\r\n        }\r\n    }\r\n}\r\n//compose put 3 in 2. then 2 in 1.\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),   //1\r\n    withAuthRedirect                                //2\r\n) (Dialogs)                                         //3\r\n\r\n//2//this line is also in compose//let AuthRedirectComponent = withAuthRedirect(Dialogs)\r\n/*\r\n(props) => {\r\nif (!this.props.isAuth) return <Redirect to=\"/login\" />\r\nreturn <Dialogs {...props} />\r\n}*/\r\n\r\n//copy of DialogsContainer which is SuperDialogsContainer but renamed back to DialogsContainer name by using  react-reduxlibrary\r\n//1                 // now this line is in compose//let DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent); //in props of Dialogs will be a, b ,c .\r\n//connect returns new Container Component(DialogsContainer) by using 2 callbacks in first bracket\r\n//мы говорим Dialogs перерисуйся если на строке 16 dialogsPage будет иной\r\n//export default DialogsContainer; "],"sourceRoot":""}