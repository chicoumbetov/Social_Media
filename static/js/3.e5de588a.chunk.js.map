{"version":3,"sources":["components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo.jsx/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/ProfileInfo.jsx/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo.jsx/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","Post","props","className","classes","item","src","alt","message","likesCount","commentButton","maxLength30","maxLengthCreator","AddNewPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","name","component","Textarea","placeholder","validate","required","MyPosts","React","memo","postsElements","postsData","reverse","map","NameLikes","d","postsBlock","values","addPost","newPostText","posts","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileInfo","profile","picture","descriptionBlock","photos","large","Preloader","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.e5de588a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__34WJD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__hFTt4\",\"commentButton\":\"Post_commentButton__2GVtB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"picture\":\"ProfileInfo_picture__3C_kQ\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2EpSu\"};","import React from 'react';\r\nimport classes from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n  return <div className={classes.item}>\r\n\r\n    <img src='./../../../images/venice.jpg' alt='venice' />\r\n    {props.message}\r\n    <div>\r\n\r\n      <button>\r\n        {props.likesCount}\r\n        <span> like</span>\r\n      </button>\r\n      <button className={classes.commentButton}>\r\n        <span> Comment</span>\r\n      </button>\r\n      \r\n    </div>\r\n\r\n  </div>;\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\n//import { PureComponent } from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { maxLengthCreator, required } from '../../../utils/validators/validators';\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\nimport d from './MyPosts.module.css';\r\n//import click from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\n\r\nconst maxLength30 = maxLengthCreator(30);\r\n\r\nlet AddNewPostForm = (props) => {\r\n  return <form onSubmit={props.handleSubmit} >\r\n    {/*//textarea when u r changed, pls call onPostChange*/}\r\n    <div>\r\n      <Field name=\"newPostText\" component={Textarea}\r\n        placeholder={\"Post message\"}\r\n        validate={[required, maxLength30]} />\r\n    </div>\r\n    <div>\r\n      {/*//button when u r clicked, pls call addPost*/}\r\n      <button>Add post</button>\r\n    </div>\r\n  </form>\r\n};\r\nlet AddNewPostFormRedux = reduxForm({ form: \"ProfileAddNewPostForm\" })(AddNewPostForm);\r\n\r\nconst MyPosts = React.memo(props => {\r\n  let postsElements =\r\n    [...props.postsData]\r\n      .reverse()\r\n      .map(NameLikes => <Post message={NameLikes.message} likesCount={NameLikes.likesCount} />);\r\n  //oldArray postsData of newArray postsElements is in Profile.jsx\r\n  //let newPostElement = React.createRef();\r\n  //callback\r\n  let onAddPost = (values) => {\r\n    props.addPost(values.newPostText);\r\n    //no rights: newPostElement.current.value = ''; //line serves to clean textarea after input\r\n    //no right: state BLL must clean. props.updateNewPostText(' '); //therefore it's used this line to clean textarea in BLL level\r\n  }\r\n\r\n  return <div className={d.postsBlock}>\r\n    <h4>My posts</h4>\r\n    <AddNewPostFormRedux onSubmit={onAddPost} />\r\n    <div className={d.posts}>\r\n      {postsElements}\r\n    </div>\r\n  </div>\r\n})\r\n\r\nexport default MyPosts;\r\n\r\n/*\r\nclass MyPosts extends PureComponent {\r\n\r\n  //no need shouldComponentUpdate which is in PureComponent\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return nextProps !== this.props || nextState !== this.state;\r\n\r\n\r\n  render() {\r\n    console.log(\"Yo\")\r\n    console.log(this.props)\r\n\r\n    let postsElements = this.props.postsData.map(NameLikes => <Post message={NameLikes.message} likesCount={NameLikes.likesCount} />);\r\n    let onAddPost = (values) => {\r\n      this.props.addPost(values.newPostText);\r\n    }\r\n\r\n    return <div className={d.postsBlock}>\r\n      <h3>My posts</h3>\r\n      <AddNewPostFormRedux onSubmit={onAddPost} />\r\n      <div className={d.posts}>\r\n        {postsElements}\r\n      </div>\r\n    </div>\r\n  }\r\n}\r\n*/","//import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addPostActionCreator } from '../../../redux/profile-reducer';\r\n//import StoreContext from '../../../StoreContext';\r\nimport MyPosts from './MyPosts';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    postsData: state.profilePage.postsData,\r\n    newPostText: state.profilePage.newPostText\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addPost: (newPostText) => {\r\n      dispatch(addPostActionCreator(newPostText))\r\n    }\r\n  }\r\n}\r\n//creating of container component for presentational component MyPosts.\r\nlet MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React, { useState, useEffect } from 'react';\r\n//import classes from './ProfileInfo.module.css';\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n \r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            { !editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode} > {props.status || \"-------\"}</span>\r\n                </div>\r\n            }\r\n\r\n            { editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true}\r\n                        onBlur={deactivateEditMode} value={status} />\r\n                </div>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\n//import { setStatus } from '../../../redux/profile-reducer';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport classes from './ProfileInfo.module.css';\r\n//import ProfileStatus from './ProfileStatus';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus}) => {\r\n\r\n  if (!profile) {\r\n    return <Preloader />\r\n  }\r\n\r\n  return (\r\n    <div>\r\n\r\n      <div className={classes.picture}>\r\n        <img src='https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcQhAuGtEUIzd1uz7lN6VC-_70yoZRGRXPbToQ&usqp=CAU' alt=\"profile\" />\r\n      </div>\r\n\r\n      <div className={classes.descriptionBlock}>\r\n        <img src={profile.photos.large} alt=\"profile\" />\r\n        <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n      </div>\r\n\r\n    </div >\r\n  )\r\n\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\n//import store from '../../redux/redux-store';\r\n//import { addPost } from '../../redux/state';\r\n//import MyPosts from './MyPosts/MyPosts';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\n//import cl from './Profile.module.css'; className={cl.profile}\r\nimport ProfileInfo from './ProfileInfo.jsx/ProfileInfo';\r\n\r\nconst Profile = (props) => {\r\n\r\n  return (\r\n    <div >\r\n      <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus} />\r\n      <MyPostsContainer /> \r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Profile;\r\n\r\n//store={props.store} don't need since we have StoreContext API instead of props.\r\n\r\n      //postsData={props.profilePage.postsData}\r\n      //newPostText={props.profilePage.newPostText}\r\n      //dispatch={props.dispatch}\r\n      //now updateNewPostText and addPost are in dispatch:\r\n\r\n      //updateNewPostText={props.updateNewPostText}\r\n      //addPost={props.addPost}","import React from 'react';\r\nimport Profile from './Profile';\r\nimport { connect } from 'react-redux';\r\nimport { getUserProfile, getStatus, updateStatus } from \"../../redux/profile-reducer\";\r\nimport { withRouter } from 'react-router-dom';\r\n//uncomment if I want limit access to profile //import { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n//import { usersAPI } from '../../api/api';\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n  componentDidMount() {\r\n\r\n    let userId = this.props.match.params.userId;\r\n    if (!userId) {\r\n      userId = this.props.authorizedUserId;\r\n      if (!userId) {\r\n        this.props.history.push(\"/login\");\r\n      }\r\n    }\r\n\r\n    this.props.getUserProfile(userId)\r\n    this.props.getStatus(userId)\r\n\r\n  }\r\n \r\n  render() {\r\n    return (\r\n      <Profile {...this.props}\r\n        profile={this.props.profile}\r\n        status={this.props.status}\r\n        updateStatus={this.props.updateStatus}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  authorizedUserId: state.auth.userId,\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, { getUserProfile, getStatus, updateStatus }),   //4\r\n  withRouter,                                     //3\r\n  //withAuthRedirect                            //2\r\n)(ProfileContainer)                              //1\r\n\r\n//2(1)     //let AuthRedirectComponent = withAuthRedirect(ProfileContainer)\r\n//3       //let WithUrlDataContainerComponent = withRouter(AuthRedirectComponent);\r\n//4       //export default connect(mapStateToProps, { getUserProfile })(WithUrlDataContainerComponent);"],"sourceRoot":""}