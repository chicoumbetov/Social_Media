{"version":3,"sources":["components/Profile/ProfileInfo.jsx/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/ProfileInfo.jsx/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo.jsx/ProfileDataForm.jsx","components/Profile/ProfileInfo.jsx/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","Post","props","className","classes","item","src","alt","message","likesCount","commentButton","maxLength30","maxLengthCreator","AddNewPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","name","component","Textarea","placeholder","validate","required","MyPosts","React","memo","postsElements","postsData","reverse","map","NameLikes","id","d","postsBlock","values","addPost","newPostText","posts","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","profile","error","formSummaryError","createField","Input","type","Object","keys","contacts","key","contact","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","picture","descriptionBlock","photos","large","userPhoto","mainPhoto","target","files","length","initialValues","formData","then","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.afd1a0d7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"picture\":\"ProfileInfo_picture__3C_kQ\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2EpSu\",\"mainPhoto\":\"ProfileInfo_mainPhoto__ekq-s\",\"contact\":\"ProfileInfo_contact__1bDc3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__34WJD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__hFTt4\",\"commentButton\":\"Post_commentButton__2GVtB\"};","import React from 'react';\r\nimport classes from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n  return <div className={classes.item}>\r\n\r\n    <img src='./../../../images/venice.jpg' alt='venice' />\r\n    {props.message}\r\n    <div>\r\n\r\n      <button>\r\n        {props.likesCount}\r\n        <span> like</span>\r\n      </button>\r\n      <button className={classes.commentButton}>\r\n        <span> Comment</span>\r\n      </button>\r\n      \r\n    </div>\r\n\r\n  </div>;\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\n//import { PureComponent } from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { maxLengthCreator, required } from '../../../utils/validators/validators';\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\nimport d from './MyPosts.module.css';\r\n//import click from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\n\r\nconst maxLength30 = maxLengthCreator(30);\r\n\r\nlet AddNewPostForm = (props) => {\r\n  return <form onSubmit={props.handleSubmit} >\r\n    {/*//textarea when u r changed, pls call onPostChange*/}\r\n    <div>\r\n      <Field name=\"newPostText\" component={Textarea}\r\n        placeholder={\"Post message\"}\r\n        validate={[required, maxLength30]} />\r\n    </div>\r\n    <div>\r\n      {/*//button when u r clicked, pls call addPost*/}\r\n      <button>Add post</button>\r\n    </div>\r\n  </form>\r\n};\r\nlet AddNewPostFormRedux = reduxForm({ form: \"ProfileAddNewPostForm\" })(AddNewPostForm);\r\n\r\nconst MyPosts = React.memo(props => {\r\n  let postsElements =\r\n    [...props.postsData]\r\n      .reverse()\r\n      .map(NameLikes => <Post key={NameLikes.id} message={NameLikes.message} likesCount={NameLikes.likesCount} />);\r\n  //oldArray postsData of newArray postsElements is in Profile.jsx\r\n  //let newPostElement = React.createRef();\r\n  //callback\r\n  let onAddPost = (values) => {\r\n    props.addPost(values.newPostText);\r\n    //no rights: newPostElement.current.value = ''; //line serves to clean textarea after input\r\n    //no right: state BLL must clean. props.updateNewPostText(' '); //therefore it's used this line to clean textarea in BLL level\r\n  }\r\n\r\n  return <div className={d.postsBlock}>\r\n    <h4>My posts</h4>\r\n    <AddNewPostFormRedux onSubmit={onAddPost} />\r\n    <div className={d.posts}>\r\n      {postsElements}\r\n    </div>\r\n  </div>\r\n})\r\n\r\nexport default MyPosts;\r\n\r\n/*\r\nclass MyPosts extends PureComponent {\r\n\r\n  //no need shouldComponentUpdate which is in PureComponent\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return nextProps !== this.props || nextState !== this.state;\r\n\r\n\r\n  render() {\r\n    console.log(\"Yo\")\r\n    console.log(this.props)\r\n\r\n    let postsElements = this.props.postsData.map(NameLikes => <Post message={NameLikes.message} likesCount={NameLikes.likesCount} />);\r\n    let onAddPost = (values) => {\r\n      this.props.addPost(values.newPostText);\r\n    }\r\n\r\n    return <div className={d.postsBlock}>\r\n      <h3>My posts</h3>\r\n      <AddNewPostFormRedux onSubmit={onAddPost} />\r\n      <div className={d.posts}>\r\n        {postsElements}\r\n      </div>\r\n    </div>\r\n  }\r\n}\r\n*/","//import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addPostActionCreator } from '../../../redux/profile-reducer';\r\n//import StoreContext from '../../../StoreContext';\r\nimport MyPosts from './MyPosts';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    postsData: state.profilePage.postsData,\r\n    newPostText: state.profilePage.newPostText\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addPost: (newPostText) => {\r\n      dispatch(addPostActionCreator(newPostText))\r\n    }\r\n  }\r\n}\r\n//creating of container component for presentational component MyPosts.\r\nlet MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React, { useState, useEffect } from 'react';\r\n//import classes from './ProfileInfo.module.css';\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n \r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            { !editMode &&\r\n                <div>\r\n                    <b>Status: </b><span onDoubleClick={activateEditMode} > {props.status || \"-------\"}</span> \r\n                </div>\r\n            }\r\n\r\n            { editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true}\r\n                        onBlur={deactivateEditMode} value={status} />\r\n                </div>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport { reduxForm } from \"redux-form\";\r\nimport { createField, Input, Textarea } from \"../../common/FormsControls/FormsControls\"\r\nimport classes from './ProfileInfo.module.css';\r\n\r\nconst ProfileDataForm = ({ handleSubmit, profile, error }) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div><button>Save</button></div>\r\n        { error && <div className={classes.formSummaryError}>\r\n                {error}\r\n            </div>\r\n        }\r\n        <div>\r\n            <b>Full name</b>: {createField(\"Full name\", \"fullName\", [], Input)}\r\n        </div>\r\n \r\n        <div>\r\n            <b>Looking for a job</b>: {createField(\"\", \"lookingForAJob\", [], Input, { type: \"checkbox\" })}\r\n        </div>\r\n\r\n            <div>\r\n                <b>My pro skills</b>:\r\n                {createField(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea )}\r\n            </div>\r\n\r\n        <div>\r\n            <b>About me</b>:\r\n            {createField(\"About me\", \"aboutMe\", [], Textarea )}\r\n        </div>\r\n\r\n        <div>\r\n            <b>Contacts: </b>: {Object.keys(profile.contacts).map(key => {\r\n                return <div key={key} className={classes.contact}>\r\n                    <b>{key}: {createField(key, \"contacts.\" + key, [], Input)}</b>\r\n                </div>\r\n            })}\r\n        </div>\r\n    </form>\r\n}\r\n\r\n//<Contact key={key} contactTitle={key} contactValue={profile.contacts[key]} />\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({ form: 'edit-profile' })(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm;","import React from 'react';\r\n//import { setStatus } from '../../../redux/profile-reducer';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport classes from './ProfileInfo.module.css';\r\n//import ProfileStatus from './ProfileStatus';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\nimport userPhoto from '../../Users/images/user.png';\r\nimport { useState } from 'react';\r\nimport ProfileDataForm from './ProfileDataForm';\r\n\r\nconst ProfileInfo = ({ profile, status, updateStatus, isOwner, savePhoto, saveProfile }) => {\r\n\r\n  let [editMode, setEditMode] = useState(false)\r\n\r\n  if (!profile) {\r\n    return <Preloader />\r\n  }\r\n\r\n  const onMainPhotoSelected = (e) => {\r\n    if (e.target.files.length) { // if there is length of file then call callback\r\n      savePhoto(e.target.files[0]) //give there chosen photo\r\n    }\r\n  }\r\n\r\n  const onSubmit = (formData) => {\r\n    let promise = saveProfile(formData) //dispatched & waiting till executing then by clicking on save button\r\n    promise.then(\r\n      () => {\r\n        setEditMode(false)\r\n      }\r\n    )\r\n\r\n  }\r\n\r\n  return (\r\n    <div>\r\n\r\n      <div className={classes.picture}>\r\n        <img src='https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcQhAuGtEUIzd1uz7lN6VC-_70yoZRGRXPbToQ&usqp=CAU' alt=\"profile\" />\r\n      </div>\r\n\r\n      <div className={classes.descriptionBlock}>\r\n        <img src={profile.photos.large || userPhoto} className={classes.mainPhoto} alt=\"profile\" />\r\n        {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected} />}\r\n\r\n        {editMode\r\n          ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit} />\r\n          : <ProfileData goToEditMode={() => { setEditMode(true) }} profile={profile} isOwner={isOwner} />}\r\n\r\n        <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n      </div>\r\n\r\n    </div >\r\n  )\r\n\r\n}\r\n\r\nconst ProfileData = ({ profile, isOwner, goToEditMode }) => {\r\n  return <div>\r\n    {isOwner && <div><button onClick={goToEditMode}>Edit</button></div>}\r\n    <div>\r\n      <b>Full name</b>: {profile.fullName}\r\n    </div>\r\n\r\n    <div>\r\n      <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n    </div>\r\n\r\n    {profile.lookingForAJob &&\r\n      <div>\r\n        <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n      </div>\r\n    }\r\n\r\n    <div>\r\n      <b>About me</b>: {profile.aboutMe}\r\n    </div>\r\n\r\n    <div>\r\n      <b>Contacts: </b>: {Object.keys(profile.contacts).map(key => {\r\n        return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]} />\r\n      })}\r\n    </div>\r\n  </div>\r\n}\r\n\r\nconst Contact = ({ contactTitle, contactValue }) => {\r\n  return <div className={classes.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\n//import store from '../../redux/redux-store';\r\n//import { addPost } from '../../redux/state';\r\n//import MyPosts from './MyPosts/MyPosts';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\n//import cl from './Profile.module.css'; className={cl.profile}\r\nimport ProfileInfo from './ProfileInfo.jsx/ProfileInfo';\r\n\r\nconst Profile = (props) => {\r\n\r\n  return (\r\n    <div >\r\n      <ProfileInfo savePhoto={props.savePhoto} \r\n                   isOwner={props.isOwner} \r\n                   profile={props.profile} \r\n                   status={props.status} \r\n                   saveProfile={props.saveProfile}\r\n                   updateStatus={props.updateStatus} />\r\n      <MyPostsContainer /> \r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Profile;\r\n\r\n//store={props.store} don't need since we have StoreContext API instead of props.\r\n\r\n      //postsData={props.profilePage.postsData}\r\n      //newPostText={props.profilePage.newPostText}\r\n      //dispatch={props.dispatch}\r\n      //now updateNewPostText and addPost are in dispatch:\r\n\r\n      //updateNewPostText={props.updateNewPostText}\r\n      //addPost={props.addPost}","import React from 'react';\r\nimport Profile from './Profile';\r\nimport { connect } from 'react-redux';\r\nimport { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile } from \"../../redux/profile-reducer\";\r\nimport { withRouter } from 'react-router-dom';\r\n//uncomment if I want limit access to profile //import { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n//import { usersAPI } from '../../api/api';\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n  refreshProfile() {\r\n\r\n    let userId = this.props.match.params.userId;\r\n    if (!userId) {\r\n      userId = this.props.authorizedUserId;\r\n      if (!userId) {\r\n        this.props.history.push(\"/login\");\r\n      }\r\n    }\r\n\r\n    this.props.getUserProfile(userId)\r\n    this.props.getStatus(userId)\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refreshProfile();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (this.props.match.params.userId !== prevProps.match.params.userId) // to skip \"looping\"\r\n      this.refreshProfile();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Profile {...this.props}\r\n        isOwner={!this.props.match.params.userId} //!! two signs means that if there is id then I am not owner, I am on someone's page\r\n        //if one ! sign then I am owner, & there is no id.\r\n        profile={this.props.profile}\r\n        status={this.props.status}\r\n        updateStatus={this.props.updateStatus}\r\n        savePhoto={this.props.savePhoto}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  authorizedUserId: state.auth.userId,\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile }),   //4   //thunks in curly brackets, which helps to give further props.\r\n  withRouter,                                     //3\r\n  //withAuthRedirect                            //2\r\n)(ProfileContainer)                              //1\r\n\r\n//2(1)     //let AuthRedirectComponent = withAuthRedirect(ProfileContainer)\r\n//3       //let WithUrlDataContainerComponent = withRouter(AuthRedirectComponent);\r\n//4       //export default connect(mapStateToProps, { getUserProfile })(WithUrlDataContainerComponent);"],"sourceRoot":""}